How did viewing a diff between two versions of a file
help you see the bug that was introduced?

Plain and simple, it just showed the lines where the
actual problem was. Though it was a bit more difficult than
it had to be because I need to manually look for all the
errors in each line.

How could having easy access to the entire history of a
file make you a more efficient programmer in the long term?

It's easier to look for errors when you have a version that
you know works fine to compare with the current one.

What do you think are the pros and cons of manually choosing
when to create a commit, like you do in Git, vs having
versions automatically saved, like Google docs does?

Pros -> You can decide which change is big enough to commit,
        as well as choose when to create commits so that it
        makes sense. In automatically created commits, that
        freedom is lost.

Cons -> You might forget to create commits, or lose your work
        due to some other reason, say, power failure. In
        automatically created commits, that possibility is
        minor because your work is saved at regular intervals.

Why do you think some version control systems, like Git,
allow saving multiple files in one commit, while others,
like Google Docs, treat each file separately?

This is because most of the general users don't edit files
that need to be tracked together. Instead, it is a very specific
use case applicable only for developers in general.

How can you use the commands git log and git diff to view the
history of files?

git log gives the change log in reverse chronological order (the
latest change appears at the top) which also includes an id for
each commit. Each commit id can be used in git diff to find the
changes made in the commits being referred. They are usually long
in either case, so be sure to press down arrow before being
sure that data on the window is all about it.

How might using version control make you more confident to make
changes that could break something?

Since we know we can always revert to a previous working version
in case we break something, hence we can proceed with less caution
and more confidence towards new features.

Now that you have your workspace set up, what do you want to try
using Git for?

Tracking changes in my code, obviously!

