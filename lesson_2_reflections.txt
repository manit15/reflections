What happens when you initialize a repository? Why do you need to do it?

When we initialize a repository, a new hidden directory is createed with
the name .git, which contains the metadata associated with the repository.
We need it so as to be able to track changes in the files contained in the
repository, which is the whole point of using version control systems.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

Staging area is different from the working directory and repository in the
fact that staging area contains only those files whose changes are to be
tracked among all the files in the working directory. Repository contains
commits, that is, a copy of files to be tracked at a particular time.

How can you use the staging area to make sure you have one commit per
logical change?

We can make changes in a lot of files, each with it's own logical change.
We can then select which ones belong to the same logical change, group them
together and commit them using the staging area. Then the other changes can
be committed using the same procedure till all the changes are committed.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Branches can be helpful in situations where we need to create various
versions of code which may or may not work out, or merge back to the intital
code. Thus we will always have our original code, and we can work on various
versions without one interfering with the other. Later, we can either merge
them or keep them separate as required.

How do the diagrams help you visualize the branch structure?

The diagrams create a chart clearly depicting the commit where the branches 
forked, or merged, which is rather hard to see in individual commit messages
for branches.

What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

The commits in either branch are merged together, sorted according to
timestamp. We represent it the way we do so as to facilitate proper
understanding of what actually happened and to make it more readable.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing
merges manually?

Pros -> We don't need to worry about copying all the code at the proper place.
		Also, most of the time, Git does the job just fine.
Cons -> When Git merges files, it may fail to recognize some part of code
		being, effectively, repeated. In such cases, manual merging is better.
		This is one of the reasons why naming culture exists in organisations.

